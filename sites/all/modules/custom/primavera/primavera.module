<?php
/**
 * @file
 * Module file for primavera.
 */

/**
 * @defgroup primavera Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function primavera_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():
  $blocks['footer_menu'] = array(
    // info: The name of the block.
    'info' => t('Footer menu'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );


  return $blocks;
}




/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function primavera_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'footer_menu':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Footer menu');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = primavera_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function primavera_contents($which_block) {
  switch ($which_block) {
    case 'footer_menu':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $result = array(
        '#markup' => '<ul class="nav">
        <li class="calendario">
          <a href="/"><img src="/img/guitarra.png">
          <span class="texto">Calendario</span></a>
        </li>
        <li class="barrios">
          <a href="/barrios"><img src="/img/casas.png">
          <span class="texto">Barrios</span></a>
        </li>
        </ul>',
      );
      return $result;

  }
}

